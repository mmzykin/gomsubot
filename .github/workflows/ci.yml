name: Go Club Bot CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Lint with pylint
        run: |
          pylint --disable=all --enable=E,F,W,R --disable=W0311,W0312,C0111,C0103,C0303,C0330,C0326 *.py

  test:
    runs-on: ubuntu-latest
    needs: lint
    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-cov pytest-mock
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Set up test environment
        run: |
          # Create a .env file for testing
          echo "TELEGRAM_BOT_TOKEN=test_token" > .env
          echo "MONGO_URI=mongodb://localhost:27017/go_club_test_db" >> .env
          echo "ADMIN_CHAT_IDS=123456789" >> .env
          echo "BACKUP_DIR=./test_backups" >> .env
          echo "SECURITY_SECRET=test_secret" >> .env
          echo "DEBUG_MODE=True" >> .env
          mkdir -p ./test_backups
      - name: Run tests
        run: |
          pytest --cov=. --cov-report=xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
